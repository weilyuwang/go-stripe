{{template "base" .}}

{{define "title"}}
Virtual Terminal
{{end}}

{{define "content"}}
<h2 class="mt-5 mb-3 text-center">Virtual Terminal</h2>
<hr>

<div class="alert alert-danger text-center d-none" id="card-messages"></div>
<form
  action="/payment-succeeded"
  method="post"
  name="charge_form"
  id="charge_form"
  class="d-block needs-validation charge-form"
  autocomplete="off"
  novalidate
>
  <div class="mb-3">
    <label for="amount" class="form-label">Amount</label>
    <input type="text" class="form-control" id="amount" name="amount" required autocomplete="amount-new">
  </div>

  <div class="mb-3">
    <label for="cardholder-name" class="form-label">Cardholder Name</label>
    <input type="text" class="form-control" id="cardholder-name" name="cardholder-name" required autocomplete="cardholder-name-new">
  </div>

  <div class="mb-3">
    <label for="cardholder-email" class="form-label">Cardholder Email</label>
    <input type="email" class="form-control" id="cardholder-email" name="cardholder-email" required autocomplete="cardholder-email-new">
  </div>

  <div class="mb-3">
    <label for="card-element" class="form-label">Credit Card</label>
    <div id="card-element" class="form-control"><!--Stripe.js injects the Card Element--></div>
    <div class="alert-danger text-center" id="card-errors" role="alert"></div>
    <div class="alert-success text-center" id="card-success" role="alert"></div>
  </div>

  <hr>

  <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onclick="val()">Charge Card</a>

  <div id="processing-payment" class="text-center d-none">
    <div class="spinner-border text-primary" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
  </div>

  <input type="hidden" name="payment_intent" id="payment_intent">
  <input type="hidden" name="payment_method" id="payment_method">
  <input type="hidden" name="payment_amount" id="payment_amount">
  <input type="hidden" name="payment_currency" id="payment_currency">
</form>
{{end}}

{{define "js"}}
  <script src="https://js.stripe.com/v3/"></script>

  <script>
    let card;
    let stripe;
    const cardMessages = document.getElementById("card-messages")
    const payButton = document.getElementById("pay-button")
    const processing = document.getElementById("processing-payment")

    // initialize stripe with public key
    stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');

    function hidePayButton() {
      payButton.classList.add('d-none');
      processing.classList.remove('d-none');
    }

    (function() {
      // Stripe Elements are customizable UI components used to collect sensitive information in your payment forms.
      const elements = stripe.elements();
      const style = {
        base: {
          fontSize: '16px',
          lineHeight: '24px',
        }
      };
      // create card entry
      card = elements.create('card', {
        style: style,
        hidePostalCode: true,
      })
      // Stripe injects an iframe into the DOM
      card.mount('#card-element')

      // check for input errors
      card.addEventListener('change', function(event) {
        let displayError = document.getElementById('card-errors')
        if (event.error) {
          displayError.classList.remove('d-none');
          displayError.textContent = event.error.message;
        } else {
          displayError.classList.add('d-none');
          displayError.textContent = '';
        }
      })
    })();

    function val() {
      let form = document.getElementById("charge_form");
      if (form.checkValidity() === false) {
        this.event.preventDefault();
        this.event.stopPropagation();
        form.classList.add("was-validated");
        return;
      }
      form.classList.add("was-validated");
      hidePayButton();

      let amountToCharge = String(parseFloat(document.getElementById("amount").value) * 100);

      let payload = {
        amount: amountToCharge,
        currency: 'cad',
      }

      const requestOptions = {
        method: 'post',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      }

      fetch("http://localhost:4001/api/payment-intent", requestOptions)
        .then(response => response.text())
        .then(response => {
          let data;
          try {
            data = JSON.parse(response);
            console.log(data);
          } catch (err) {
            console.log(err);
          }
        })
    }
  </script>
{{end}}
